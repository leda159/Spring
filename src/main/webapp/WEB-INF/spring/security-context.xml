<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">

	<beans:bean id="customAccessDenied"
				class="org.bigdata.security.CustomAccessDeniedHandler"/>
				
	
	<!-- p639 정상로그인후 처리 -->
	<beans:bean id="customLoginSuccess"
				class="org.bigdata.security.CustomLoginSuccessHandler"/>

	<!-- p649 비밀번호 암호화 처리 빈등록 -->
	<!-- <beans:bean id="customPasswordEncoder"
				class="org.bigdata.security.CustomNoOpPasswordEncoder"/> -->

	<!-- p652 비밀번호 해시함수를 이용하여 암호화 처리 -->
	<beans:bean id="bcryptPasswordEncoder"
				class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

	<!-- 
		인증,인가의 기능을 수행하는 태그
		auto-config="true" ?
		기본 로그인 페이지,Http 기본인증,로그아웃 기능들을
		제공한다.
		use-expressions="true" ?
		EL(Expression Language을 사용한다는 선언) 
	-->
	<security:http 
			auto-config="true" 
			use-expressions="true">
		
		<!-- 
			url 접근 제한 설정
			permitAll:모든 사용자에게 접근허용 
		-->
		<security:intercept-url
			pattern="/sample/all"
			access="permitAll"/>
		
		<!-- 
			ROLE_MEMBER 권한을 가진 사용자만 url 접근 
		-->	
		<security:intercept-url
			pattern="/sample/member"
			access="hasRole('ROLE_MEMBER')"/>	
			
			
		<security:intercept-url
			pattern="/sample/admin"
			access="hasRole('ROLE_ADMIN')"/>	
		
		<!-- 개발자가 작성한 로그인 화면을 적용 -->
		<security:form-login 
				login-page="/customLogin"
				authentication-success-handler-ref="customLoginSuccess"/>
				
				
		
		<!-- p626
		    예외발생시 id="customAccessDenied" 를 참조
		    하여 예외처리
		-->
		<security:access-denied-handler
			ref="customAccessDenied"/>
			
		<!-- p640 로그아웃 처리 -->
		<security:logout
			logout-url="/customLogout" 
			invalidate-session="true"/>	
				
	</security:http>
	
	<!-- 인증 처리를 하는 방법을 선언 -->
	<security:authentication-manager>
		<security:authentication-provider>
		<!-- 	<security:user-service>
				
					사용자 지정 
					비밀번호를 원래는 인코딩처리를 하는데
					{noop}은 인코딩 처리를 하지 않는다는 
					선언
				
				<security:user 
						name="member" 
						password="{noop}member"
						authorities="ROLE_MEMBER"/>
						
				
					admin 사용자는 두개의 권한을 가짐
					admin 사용자는
					/sample/member 접근가능
					/sample/admin 접근가능
						
				<security:user 
						name="admin" 
						password="{noop}admin"
						authorities="ROLE_MEMBER,ROLE_ADMIN"/>		
						
			</security:user-service> -->
			
			<!-- 
			  p646
			  root-context.xml에 
			  dataSource 빈등록 여부 확인 필수 
			-->
			<!-- 스프링이 요구하는 테이블 구조 생성시 사용 -->
			<!-- <security:jdbc-user-service 
			 	data-source-ref="dataSource"/> -->
			 	
			<!-- 
				p657 별도의 테이블 사용시 인증
				users-by-username-query ?
				사용자 아이디에 대한 비밀번호 일치여부를 확인
				authorities-by-username-query?
				로그인에 성공한 사용자에 대해 사용자의
				권한을 확인하여 접근가능한 url에만 접근 허용
			--> 
			<security:jdbc-user-service 
					data-source-ref="dataSource"
					users-by-username-query="select userid,userpw,enabled from tbl_member where userid = ?"
					authorities-by-username-query="select userid,auth from tbl_member_auth where userid = ?"
			/>	
			 	
			<!-- p649 비밀번호 암호화 Bean 참조-->
			<!-- <security:password-encoder
				ref="customPasswordEncoder"/>  -->	
				
			<!-- p652 비밀번호 암호화 -->
			<security:password-encoder
			    ref="bcryptPasswordEncoder"/>	
			 				
		</security:authentication-provider>
	</security:authentication-manager>


</beans:beans>






